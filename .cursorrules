# Workflow

When instructed "local work":
1. - Prepare commit:
     ```bash
     ./workflow.sh prepare-commit
     ```
   - Commit and push:
     ```bash
     ./workflow.sh commit-and-push "<a short conventional commit message>"
     ```

When instructed "next issue":
1. List and select first unblocked issue:
   ```bash
   ./workflow.sh list-issues
   ```

2. Start work:
   ```bash
   ./workflow.sh start-issue <issue-number>
   ```

3. Work on issue:
   - Read issue and related content
   - Implement changes
   - Test locally
   - Prepare commit:
     ```bash
     ./workflow.sh prepare-commit
     ```
   - Commit and push:
     ```bash
     ./workflow.sh commit-and-push "<a short conventional commit message>"
     ```

4. Complete issue:
   ```bash
   ./workflow.sh complete-issue <pr-number> <issue-number>
   ```

Error Handling:
- Debug and fix issues as they arise
- If stuck:
  1. Note blocking issue and solutions tried
  2. Reset to last successful commit
  3. Try new approach
  4. If stuck 3 times: mark as blocked and move on

Guidelines:
- No direct `gh` commands
- Pipe `git` output through `cat`
- Prioritize by age and priority labels
- Keep PRs focused
- Test thoroughly
- Update docs for changes

# Capabilities

## Web Browsing
You are always allowed to browse the web for more information.
To facilitate this, use the capability script:
```bash
./capability.sh browse <url>
```

## Searching
To search the web, use the capability script:
```bash
./capability.sh search <query>
```

## Screenshotting
To take a screenshot of a webpage, use the capability script:
```bash
./capability.sh screenshot <url> [output-path]
```
- `url`: The URL of the webpage to screenshot
- `output-path`: (Optional) The path where the screenshot should be saved. Defaults to `screenshot.png`

The screenshot will be taken using Puppeteer in headless mode, capturing the full page content.
