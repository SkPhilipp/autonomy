# Workflow

When instructed "local work":

1. Commit and push changes:
   ```bash
   ./workflow.sh commit-and-push "<a short conventional commit message>"
   ```
   - Must follow conventional commit format: type(scope): description
   - Types: feat, fix, docs, style, refactor, test, chore
   - Scope should match the area being changed
   - Description should be clear and concise

When instructed "next issue":

1. List open issues and select one:
   ```bash
   ./workflow.sh list-issues
   ```
   Select the first unblocked issue (lowest number)

2. Start work on an issue:
   ```bash
   ./workflow.sh start-issue <issue-number>
   ```
   This creates a branch and pushes it

3. Work on the issue:
   - Read the issue description and comments
   - Check for any linked PRs or related issues
   - Implement the required changes
   - Test the changes locally
   - Review changes and prepare commit:
     ```bash
     ./workflow.sh prepare-commit
     ```
   - Commit and push changes:
     ```bash
     ./workflow.sh commit-and-push "<a short conventional commit message>"
     ```

4. Complete the issue:
   ```bash
   ./workflow.sh complete-issue <pr-number> <issue-number>
   ```
   This creates a PR, monitors CI/CD, and merges when ready

Error Handling:
- During development (steps 1-4):
  - Debug and fix issues as they arise
  - Continue development until the issue is resolved
  - No need to reset or retry unless completely stuck

- When completely stuck (unable to proceed):
  1. Make an internal note of the blocking issue and attempted solutions
  2. Git reset to the last successful commit
  3. Analyze the blocking issue and determine a different approach
  4. Retry with the new approach
  5. If stuck 3 times with different approaches:
     - Mark the issue as "blocked" with appropriate labels
     - Skip the issue and move to the next one

Additional Guidelines:
- Do not directly run `gh` commands
- Run `git` commands that print any data through `cat`
- Prioritize issues based on:
  - Issue age (older issues first)
  - Issue priority labels
- Keep PRs focused and small
- Write clear commit messages
- Test changes thoroughly before pushing
- Update documentation when making changes

# Available Commands

The following commands are available in `workflow.sh`:

1. List open issues:
   ```bash
   ./workflow.sh list-issues
   ```
   Shows all open issues, sorted by priority and age.

2. Start work on an issue:
   ```bash
   ./workflow.sh start-issue <issue-number>
   ```
   Creates a new branch and pushes it to origin.

3. Prepare commit:
   ```bash
   ./workflow.sh prepare-commit
   ```
   Shows current changes and helps prepare a commit message.

4. Commit and push changes:
   ```bash
   ./workflow.sh commit-and-push "<message>"
   ```
   Commits and pushes changes to the current branch.

5. Monitor CI/CD:
   ```bash
   ./workflow.sh monitor-ci <pr-number>
   ```
   Watches CI/CD checks for a PR.

6. Complete work on an issue:
   ```bash
   ./workflow.sh complete-issue <pr-number> <issue-number>
   ```
   Creates a PR, monitors CI/CD, and merges when ready.

7. Add failure status:
   ```bash
   ./workflow.sh add-failure-status <pr-number> "<message>"
   ```
   Adds a failure status report to a PR.

# Capabilities

## Web Browsing

You are always allowed to browse the web for more information.
To facilitate this, use the capability script:
```bash
./capability.sh browse <url>
```

## Searching

To search the web, use the capability script:
```bash
./capability.sh search <query>
```
